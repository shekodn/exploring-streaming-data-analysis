Parameters:
  CodePipelineBucket:
    Type: String

Resources:
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 2
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  SourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: "true"
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: !Ref TheLambda
      StartingPosition: "TRIM_HORIZON"

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Vin"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Vin"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: TableName
          Value: !Ref AWS::StackName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'LambdaExecutionRole ARN'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        # Ensure the role can perform the GetRecords, GetShardIterator, DescribeStream,
        # and ListStreams Actions on your stream in IAM.
        - PolicyName: !Sub '${AWS::StackName}-KinesisManagedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource:
                  - arn:aws:kinesis:*

        - PolicyName: !Sub '${AWS::StackName}-DynamoDB'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - arn:aws:dynamodb:*
      Tags:
        - Key: RoleName
          Value: !Ref AWS::StackName

  TheLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: !Ref AWS::StackName
      Code:
        S3Bucket: !Ref CodePipelineBucket
        S3Key: function.zip
      Description: 'TheLambda ARN'
      Handler: main
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: go1.x
      Timeout: 60
      MemorySize: 1024
      Tags:
        - Key: FunctionName
          Value: !Ref AWS::StackName

Outputs:
  KinesisStream:
    Description: 'Kinesis Stream ARN'
    Value: !Sub '${KinesisStream.Arn}'
    Export:
      Name: KinesisStreamArn
  LambdaExecutionRole:
    Description: 'LambdaExecutionRole ARN'
    Value: !Sub '${LambdaExecutionRole.Arn}'
    Export:
      Name: LambdaExecutionRole
  TheLambda:
    Description: 'TheLambda ARN'
    Value: !Sub '${TheLambda.Arn}'
    Export:
      Name: TheLambda
  TheLambdaFunctionName:
    Description: 'TheLambda Function Name'
    Value: !Ref TheLambda
    Export:
      Name: TheLambdaFunctionName
  DynamoDB:
    Description: 'DynamoDB ARN'
    Value: !Sub '${DynamoDB.Arn}'
    Export:
      Name: DynamoDB
